<?php

/**
 * Implementation of hook_field_info() 
 */
function tweetbutton_field_info() {
  return array(
    'tweetbutton' => array(
      'label' => 'Tweetbutton',
      'description' => 'Creates a tweetbutton field',
      'instance_settings' => array( 'tweet_text', 'author_twitter'),
      'default_widget' => 'tweetbutton',
      'default_formatter' => 'tweetbutton_formatter_button_horizontal',
    ),
  );
}

/**
 * Implementation of hook_field_is_empty() 
 */
function tweetbutton_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implementation of hook_field_settings_form 
 */
function tweetbutton_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  
  $form = array();
  
  $form['tweet_text'] = array(
    '#type' => 'textfield',
    '#title' =>  t('Tweet text'),
    '#default_value' => isset($settings['tweet_text'])? $settings['tweet_text']: variable_get('tweetbutton_tweet_text'),
  );


  $form['author_twitter'] = array(
    '#type' => 'textfield',
    '#title' => t('Author twitter account'),
    '#default_value' => isset($settings['author_twitter'])? $settings['author_twitter']: variable_get('tweetbutton_account'),
    '#description' => t('This user will be @mentioned in the suggested'),
  );
  
  $form['tokens'] = array(
    '#token_types' => array($instance['entity_type']),
    '#theme' => 'token_tree',
  );
  
  return $form;
}

/**
 * Implementation of hook_field_widget_info() 
 */
function tweetbutton_field_widget_info() {
  return array(
    'tweetbutton' => array(
      'label' => t('Tweetbutton'),
      'field types' => array('tweetbutton'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT
      ),
    ),
  );
}

/**
 * Implementation of hook_field_widget_form() 
 */
function tweetbutton_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['account'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['account'])? $items[$delta]['account']: $field['settings']['author_twitter'],
    '#title' => t('Author twitter account'),
    '#description' => t('Leave blank to use global twitter account.'),
    '#maxlength' => 128,
    '#access' => user_access('use tweetbutton field'),
  );
  
  $element['text'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['text'])? $items[$delta]['text']: $field['settings']['tweet_text'],
    '#title' => t('Tweet text'),
    '#description' => t('Leave blank to use page title as tweet text'),
    '#maxlength' => 32,
    '#access' => user_access('use tweetbutton field'),
  );
  
  return $element;
}

/**
 * Implementation of hook_field_presave() 
 */
function tweetbutton_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'tweetbutton') {
    foreach ($items as $delta => $item) {
      $data = array($entity_type => $entity);
      $option = array('clear' => TRUE);
      $items[$delta]['text'] = !empty($items[$delta]['text'])? token_replace($items[$delta]['text'], $data, $option): '';
      $items[$delta]['account'] = !empty($items[$delta]['account'])? token_replace($items[$delta]['account'], $data, $option): '';
    }
  }
}


/**
 * Implementation of hook_field_formatter_info()
 */
function tweetbutton_field_formatter_info() {
  return array(
    'tweetbutton_formatter_button_vertical' => array(
      'label' => t('Tweetbutton style vertical'),
      'field types' => array('tweetbutton'),
    ),
    'tweetbutton_formatter_button_horizontal' => array(
      'label' => t('Tweetbutton style horizontal'),
      'field types' => array('tweetbutton'),
    ),
    'tweetbutton_formatter_button_none' => array(
      'label' => t('Tweetbutton style none'),
      'field types' => array('tweetbutton'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tweetbutton_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $delta = 0;
  switch ($display['type']) {
    case 'tweetbutton_formatter_button_vertical':
      $button_type = 'vertical';
      break;
    case 'tweetbutton_formatter_button_horizontal':
      $button_type = 'horizontal';
      break;
    case 'tweetbutton_formatter_button_none':
      $button_type = 'none';
      break;
  }

  $element[$delta] = array(
    '#theme' => 'tweetbutton_display',
    '#options' => array(
      'type'            => $button_type,
      'account'         => $items[$delta]['account'],
      'tweet_text'      => $items[$delta]['text'],
      'url'             => url($entity->uri['path'], array('absolute' => TRUE)),
    ),
    '#entity' => $entity,
    '#entity_type' => $entity_type,
     
  );
  return $element;
}

/**
 * Implementation of hook_help()
 */
function tweetbutton_help($path, $arg) {
	$output = NULL;
  switch($path) {
  	case 'admin/help#tweetbutton':
      $output = '<p>' . t('This button allows your website to let people share content on Twitter without having to leave the page. Promote strategic Twitter accounts at the same time while driving traffic to your website. These are the general configuration options for the button. Make sure to check the Node Settings to set where the button will appear.') . '</p>';
  	  break;
  }
  return $output;
}

/**
 * Implementation of hook_menu()
 */ 
function tweetbutton_menu() {
	$items = array();

  $items['admin/config/services/tweetbutton'] = array(
    'title'            => 'Tweet Button',
    'description'      => 'Configure the look and behavior of the Tweet Button appears on the site.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('tweetbutton_admin_settings'),
    'access arguments' => array('administer tweetbutton'),
    'file'             => 'tweetbutton.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function tweetbutton_theme() {
	return array(
    'tweetbutton_display' => array(
      'variables' => array('entity' => NULL, 'entity_type' => NULL, 'options' => array()),
    ),
  );
}


/**
 * Implementation of hook_cron() 
 */
function tweetbutton_cron() {
  // @TODO: Fetch count of each page where tweetbutton is on and add it to column 'count' in field
  // Will be useful in sorting page based on no of tweets and add views support
}

/**
 * Implementation of hook_permission()
 */
function tweetbutton_permission() {
  return array(
    'administer tweetbutton' => array(
      'title' => t('Administer Tweet Button'),
    ),
    'access tweetbutton' => array(
      'title' => t('Access Tweet Button'),
    ),
    'use tweetbutton field' => array(
      'title' => t('Use tweetbutton field to alter tweet text')
    ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function tweetbutton_block_info() {
  $blocks['tweetbutton'] = array(
    'info' => t('Tweetbutton'),
    'weight' => 0,    
  );  
  
  return $blocks;
}

/**
 * Implementation of hook_block_configure 
 */
function tweetbutton_block_view($delta = '') {
  if ($delta == 'tweetbutton') {
    $block['subject'] = t('Tweetbutton');
    $block['content'] = theme('tweetbutton_display');
    return $block; 
  }
}

/**
 * Helper function to build the required tweet attributes
 * @param $object
 *   Entity object can either be (node, user, taxonomy) 
 * @param $options
 *   Context specific options
 * @return 
 *   List of attributes to be rendered for twitter tweetbutton
 */
function tweetbutton_get_attributes($options = array()) {
  global $language;
  
  $default_option = array(
    'type'        => variable_get('tweetbutton_button', 'vertical'),
    'text'        => variable_get('tweetbutton_tweet_text'),
    'language'    => variable_get('tweetbutton_language'),
    'account'     => variable_get('tweetbutton_account'),
    'rel_account' => variable_get('tweetbutton_rel_account_name'),
    'rel_desc'    => variable_get('tweetbutton_rel_account_description'),
  );
  
  if (empty($options['url'])) {
    $options['url'] = url($_GET['q'], array('absolute' => TRUE));  
  }

  $options += $default_option;
  
  $attributes =  array(
    'data-count'   => $options['type'],
    'data-via'     => $options['account'],
    'data-related' => $options['rel_account'] . ':' . $options['rel_desc'],
    'data-text'    => $options['text'],
    'data-counturl'=> $options['url'],
    'data-url'     => $options['url'],
    'data-lang'    => $options['language'] == 'auto' ? $language->language : $options['language'],
    'class'        => 'twitter-share-button',
  );

  return $attributes;
}


function theme_tweetbutton_display($variables) {
  $script_url = url('http://platform.twitter.com/widgets.js', array('external' => TRUE));
  drupal_add_js($script_url, array('type' => 'external', 'scope' => 'footer'));
  
  $options = $variables['options'];
  $attributes = tweetbutton_get_attributes($options);
 
  $tweet_link = l(t('Tweet'), 'http://twitter.com/share', array('attributes' => $attributes, 'external' => TRUE));
  $link = '<div class="tweetbutton">' . $tweet_link . '</div>';

  return $link;
}